Unit : Type;
Unit = {:unit};

unit : Unit;
unit = :unit;

List : Type -> Type;
List = A =>
  (label: {:null, :cons}) * match label {
    :null = Unit;
    :cons = A * List A;
  };

null : (A: Type) -> List A;
null = A => (:null, unit);

cons : (A: Type) -> A -> List A -> List A;
cons = A => a => rest => (:cons, a, rest);

fold : (A: Type) -> (B: Type) -> (B -> A -> B) -> B -> List A -> B;
fold = A => B => action => initial => list =>
  let (ll, l_) = list;

  match ll {
    :null = initial;

    :cons =
      let (value, rest) = l_;
      fold A B action (action initial value) rest;
  };

Nat : Type;
Nat =
  (label: {:zero, :succ}) * match label {
    :zero = Unit;
    :succ = Nat;
  };

zero : Nat;
zero = (:zero, unit);

succ : Nat -> Nat;
succ = value => (:succ, value);

from : Nat -> List Nat;
from = n =>
  let (nl, n_) = n;

  match nl {
    :zero = null Nat;
    :succ = cons Nat (succ n_) (from n_);
  };

add : Nat -> Nat -> Nat;
add = a => b =>
  let (al, a_) = a;

  match al {
    :zero = b;
    :succ = succ (add a_ b);
  };

mul : Nat -> Nat -> Nat;
mul = a => b =>
  let (al, a_) = a;

  match al {
    :zero = zero;
    :succ = add b (mul a_ b);
  };

one : Nat;
one = succ zero;

two : Nat;
two = succ one;

three : Nat;
three = succ two;

four : Nat;
four = succ three;

five : Nat;
five = succ four;

ten : Nat;
ten = mul five two;

nine : Nat;
nine = mul three three;

eighteen : Nat;
eighteen = add nine nine;

eighty_one : Nat;
eighty_one = mul nine nine;

six_thousand : Nat;
six_thousand = mul eighty_one eighty_one;

to_int32 : Nat -> Int32;
to_int32 = value =>
  let (label, value) = value;

  match label {
    :zero = 0;
    :succ = +i 1 (to_int32 value);
  };

start : Int32;
start = to_int32 (mul eighteen (mul eighteen eighteen));
